@using CourseProjectLiteMK5;
@using CourseProjectLiteMK5.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Mvc;
@inject PostService postService
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime jsRuntime

@if (latestPosts.Count < 1)
{
    <h3 class="text-center">No posts found, write a new post for everyone to see!</h3>
}
else
{
    @foreach (var post in latestPosts)
    {
        var currentPost = post;
        var modalId = $"modal-{currentPost.Id}";
        var deleteModalId = $"deleteModal-{currentPost.Id}";
        var roles = httpContextAccessor.HttpContext.User.Claims.Where(claim => claim.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
        var currentUserId = httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);

        @if (!DeletedPostIds.Contains(currentPost.Id))
        {
            <article class="d-flex bg-white w-100 mb-3" style="border-radius: 0.5vh;">
                <div class="text-center" style="background-color: #eeeeee;">
                    <button class="border-0 bg-transparent fs-4" disabled><i class="fa-solid fa-angle-up"></i></button>
                    <p class="m-0">0</p>
                    <button class="border-0 bg-transparent fs-4" disabled><i class="fa-solid fa-angle-down"></i></button>
                </div>

                <div class="d-flex flex-column w-100 py-2 px-3">

                    <div class="d-flex gap-3 flex-sm-row flex-column">
                        <a class="fs-6 p-0 nav-link disabled">Category</a>
                        @if (currentPost.User != null)
                        {
                            <p>Posted by <a href="#" class="p-0 nav-link disabled d-inline-block">@currentPost.User.UserName</a> @currentPost.CreationDate</p>
                        }
                        else
                        {
                            <p>Posted by <a href="#" class="p-0 nav-link disabled d-inline-block">NULL</a> @currentPost.CreationDate</p>
                        }
                        @if (httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
                        {
                            if (currentUserId == currentPost.UserId || roles.Contains("Admin"))
                            {
                                <button type="button" class="btn btn-primary ms-auto d-none d-sm-inline-block" @onclick="() => OpenEditModal(post)">Edit</button>
                                <button type="button" class="btn-lg btn-primary w-100 d-sm-none my-2" @onclick="() => OpenEditModal(post)">Edit</button>
                            }
                        }
                    </div>

                    <div class="d-flex align-items-center">
                        <h1 class="me-auto">@currentPost.Title</h1>
                        <a href="#" class="p-0 nav-link disabled">Tags</a>
                    </div>

                    <div style="min-height: 15rem;">
                        <p>@currentPost.Content</p>
                    </div>

                    <div>
                        <button class="fs-5 border-0 bg-transparent" disabled><i class="fa-regular fa-message"></i> <span>0</span> Comments</button>
                        <button class="fs-5 border-0 bg-transparent" disabled><i class="fa-solid fa-share-from-square"></i> Share</button>
                        <button class="fs-5 border-0 bg-transparent" disabled><i class="fa-solid fa-ellipsis"></i></button>
                    </div>

                </div>
            </article>

            <EditForm Model="@currentPost" OnSubmit="@(editContext => HandleSubmit(editContext, currentPost, currentUserId, roles))">
                <DataAnnotationsValidator />
                <div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="@modalId" aria-hidden="true" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit Post</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div>
                                    <label>Title</label>
                                    <InputText class="form-control" id="title" @bind-Value="currentPost.NewTitle" />
                                    <ValidationMessage class="text-danger" For="@(() => currentPost.NewTitle)" />
                                </div>
                                <div>
                                    <label>Content</label>
                                    <InputTextArea class="form-control" id="content" @bind-Value="currentPost.NewContent" />
                                    <ValidationMessage class="text-danger" For="@(() => currentPost.NewContent)" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger me-auto" @onclick="() => OpenDeleteModal(currentPost)">Delete Post</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-primary">Save changes</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="@deleteModalId" aria-hidden="true" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Post</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p>Are you sure you want to delete this post?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal"
                            @onclick="() => DeletePost(currentPost, currentPost.User, currentUserId, roles)">
                                    Delete Post
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="() => OpenEditModal(currentPost)">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    }
}
@if (!allRowsLoaded && latestPosts.Count >= 1)
{
    <button class="btn-lg btn-outline-primary d-flex mx-auto" @onclick="LoadMorePosts">Load More</button>
}



@code {
    public List<string> DeletedPostIds { get; set; } = new List<string>();
    private List<Post> latestPosts;
    private bool allRowsLoaded;
    private int loadedPostCount = 5;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();

    }

    private async Task LoadPosts()
    {
        latestPosts = await postService.GetLatestPosts(loadedPostCount);
        allRowsLoaded = latestPosts.Count < loadedPostCount;
    }

    private async Task LoadMorePosts()
    {
        loadedPostCount += 5;
        await LoadPosts();
    }

    private async Task UpdatePost(Post updatedPost, User postUser, string currentUserId, List<string> roles)
    {
        if (postUser != null && (currentUserId == updatedPost.UserId.ToString() || roles.Contains("Admin")))
        {
            await postService.UpdatePost(updatedPost);
        }
    }

    private async Task DeletePost(Post deletePost, User postUser, string currentUserId, List<string> roles)
    {
        if(postUser != null && (currentUserId == deletePost.UserId.ToString() || roles.Contains("Admin")))
        {
            await postService.DeletePost(deletePost);
            DeletedPostIds.Add(deletePost.Id);
        }
    }

    private async Task HandleSubmit(EditContext editContext, Post updatedPost, string currentUserId, List<string> roles)
    {
        if (editContext.Validate())
        {
            updatedPost.Title = updatedPost.NewTitle;
            updatedPost.Content = updatedPost.NewContent;

            updatedPost.NewTitle = null;
            updatedPost.NewContent = null;

            await CloseModal($"#modal-{updatedPost.Id}");
            await UpdatePost(updatedPost, updatedPost.User, currentUserId, roles);
        }
    }

    private async Task OpenEditModal(Post post)
    {
        post.NewTitle = post.Title;
        post.NewContent = post.Content;

        await CloseModal($"#deleteModal-{post.Id}");
        await ShowModal($"#modal-{post.Id}");
    }

    private async Task OpenDeleteModal(Post post)
    {
        await CloseModal($"#modal-{post.Id}");
        await ShowModal($"#deleteModal-{post.Id}");
    }

    private async Task CloseModal(string modalId)
    {
        await jsRuntime.InvokeVoidAsync("hideModal", modalId);
    }

    private async Task ShowModal(string modalId)
    {
        await jsRuntime.InvokeVoidAsync("showModal", modalId);
    }
}